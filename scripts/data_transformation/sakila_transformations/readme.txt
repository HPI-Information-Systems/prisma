This directory contains the Python scripts for generating the Sakila matching scenarios.

The dependencies needed to run the scripts are the following:
- mysql-connector-python~=8.1.0
- pandas~=2.1.1
- numpy~=1.26.1

It is assumed that the Sakila database is stored in a DBMS, which will be queried by the scripts included in this folder.
The following are instructions to create a new MariaDB instance populated with the Sakila database in Windows:
- Download MariaDB from https://mariadb.org/download/?t=mariadb&p=mariadb&r=11.4.0&os=windows&cpu=x86_64&pkg=msi&m=agdsn
- Download the Sakila database from https://dev.mysql.com/doc/index-other.html
- Open the MariaDB client and create the Sakila database
    - create database sakila;
	- use sakila;
	- source PATH-TO-SAKILA-SCHEMA.sql;
	- source PATH-TO-SAKILA-DATA.sql;

Once the database is set up, it is possible to generate 3 schemata by applying different join operations.
These can be generated by running the scripts "download_sakila_schema1.py", "download_sakila_schema2.py" and
"download_sakila_schema3.py", with the following parameters:
    --host <HOST_NAME>
    --database <DATABASE_NAME>
    --user <USER_NAME>
    --password <PASSWORD>,
    --exclude_attributes <LIST_COLUMNS_TO_EXCLUDE>
    --save_path <SAKILA_DIR>
It is recommended to generate a single folder in which to store these scenarios (i.e., the <SAKILA_DIR> used as
save_path in the previous commands).

Together with the execution of these scripts it is necessary to manually create the files containing the mappings
between the schema elements of the original schema and each of the previously generated schemata.
We use the following format to define the content of such ground-truth files:
    <source_table>.<source_col_name> = <target_table.<target_col_name>
While we use the following format to define the name of such ground-truth files:
    <source_schema_name>_<target_schema_name>.txt
We suggest saving these files inside the <SAKILA_DIR>/gt sub-folder.
See the files "schema1_schema2.txt" and "schema1_schema3.txt" for some examples.

To create challenging schema matching scenarios, we translate these schemata into another language (e.g. Italian).
To carry out this operation it is necessary to create a json file where both table names and the column names are
translated into the desired language.
This defines a mapping file that will be leveraged later to translate the schema.
We suggest saving these files inside the <SAKILA_DIR>/languages sub-folder.
See the "it.json" file for an example.

To translate a schema run the "translate_schema.py" script with the following parameters:
    --schema_dir <SCHEMA_DIRECTORY>
    --language <LANGUAGE_NAME>
    --language_map_path <PATH_TO_LANGUAGE_MAP_FILE>
    --out_dir <OUTPUT_DIR_FOR_SCHEMA>
    --out_gt_dir <OUTPUT_DIR_FOR_GT>
To translate a ground truth file run the "translate_gt.py" script with the following parameters:
    --gt_path <GROUND-TRUTH_PATH>
    --out_path <OUTPUT_GT_PATH>
    --language_map_path <PATH_TO_LANGUAGE_MAP_FILE>

Overall, the following evaluation scenarios can be generated:
1) Same language, but different schemata
    s1 vs s2
    s1 vs s3
2) Same schema, but different languages
    s1 vs s1-it
    s2 vs s2-it
    s3 vs s3-it
3) Different languages and different schemata
    s1-it vs s2
    s1 vs s2-it
    s1-it vs s3
    s1 vs s3-it